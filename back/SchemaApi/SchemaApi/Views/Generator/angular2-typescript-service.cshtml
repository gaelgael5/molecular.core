@using Microsoft.AspNetCore.Mvc.ApiExplorer;
@using Molecular.Helpers;
@using SchemaApi.Models.Generators;
@model IApiDescriptionGroupCollectionProvider
@{

    var template = new RazorHelperTypescript(this);
    TypeDiscoverRepository repository = new TypeDiscoverRepository(Model);
    List<ApiDescription> _apis = new List<ApiDescription>();
    foreach (ApiDescriptionGroup group in Model.ApiDescriptionGroups.Items)
    {
        foreach (Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription api in group.Items)
        {
            _apis.Add(api);
        }
    }
    var apis = _apis.ToLookup(c => (c.ActionDescriptor as Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor).ControllerName);

    /* tslint:disable:no-unused-variable member-ordering */


    foreach (var group in apis)
    {

        string name = group.Key;
        string targetPath = $"Shared\\{name}\\{name}service.ts";

        template.AddStartComment();
        template.AddCommentLine("NOTE: This class is auto generated by the template angular2-typescript-service.cshtml.");
        template.AddCommentLine("Do not edit the class manually.");
        template.AddEndComment();
        template.AddEmpty();

        // Imports
        HashSet<Type> _types = new HashSet<Type>();

        foreach (ApiDescription api in group)
        {
            foreach (ApiParameterDescription p in api.ParameterDescriptions)
            {
                if (p.Type != null)
                {
                    repository.FindTypeToImport(p.Type, _types);
                }
            }

            foreach (ApiResponseType response in api.SupportedResponseTypes)
            {
                repository.FindTypeToImport(response.Type, _types);
            }
        }

        template.AddImport("Inject, Injectable, Optional", "@angular/core");
        template.AddImport("Http, Headers, URLSearchParams", "@angular/http");
        template.AddImport("RequestMethod, RequestOptions, RequestOptionsArgs", "@angular/http");
        template.AddImport("Response, ResponseContentType", "@angular/http");
        template.AddImport("Observable", "rxjs/Observable");
        template.AddImport("BASE_PATH", "../variables");
        template.AddImport("Configuration", PathBuilderHelper.GetRelativePath(System.IO.Path.Combine(@"c:\app", targetPath), "c:\\app\\shared\\configuration.model.ts"));

        foreach (var item in _types)
        {
            string txt = $"Shared\\{item.Namespace.Replace(".", "\\")}\\{item.Name}.ts";
            string _path = PathBuilderHelper.GetRelativePath(System.IO.Path.Combine(@"c:\app", targetPath), System.IO.Path.Combine(@"c:\app", txt));
            template.AddImport(template.WriteType(item), _path);
        }

        template.AddEmpty();


        template.Add("@Injectable()");
        using (var t = template.AddExportedClass(name, "I" + name))
        {

            template.AddProperty("basePath", "string", RazorHelperTypescript.ExpositionEnum.Protected, "'http://petstore.swagger.io/v2'");
            template.AddProperty("defaultHeaders", "Headers", RazorHelperTypescript.ExpositionEnum.Public, "new Headers()");
            template.AddProperty("configuration", "Configuration", RazorHelperTypescript.ExpositionEnum.Public, "new Configuration()");

            using (var m = template.AddMethod("constructor", null, new List<KeyValuePair<string, string>>()
            {
                new KeyValuePair<string, string>("protected http", "Http"),
                new KeyValuePair<string, string>("@Optional() @Inject(BASE_PATH) basePath", "string"),
                new KeyValuePair<string, string>("@Optional() configuration", "Configuration"),
            }))
            {
                using (template.AddIf("basePath"))
                {
                    template.AddLine("this.basePath = basePath;");
                }
                using (template.AddIf("configuration"))
                {
                    template.AddLine("this.configuration = configuration;");
                }
            }
            template.AddEmpty();

            template.Add(@"    /**
    *
    * Extends object by coping non-existing properties.
    * @@param objA object to be extended
    * @@param objB source object
    */
    private extendObj<T1, T2>
        (objA: T1, objB: T2) {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1 & T2>
            objA;
    }

    /**
    * @@param consumes string[] mime-types
    * @@return true: consumes contains 'multipart/form-data', false: otherwise
    */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

");

            foreach (ApiDescription api in group)
            {

                var nn = api.ActionDescriptor.DisplayName.Split('(')[0].Split('.');
                string methodName = nn[nn.Length - 1].Trim();

                var parameters = new List<KeyValuePair<string, string>>();

                foreach (ApiParameterDescription p in api.ParameterDescriptions)
                {
                    string type = p.Type != null ? template.WriteType(p.Type) : "[NULL]";
                    parameters.Add(new KeyValuePair<string, string>(p.Name, type));

                }

                string resultType = "Observable<{}>";
                foreach (ApiResponseType response in api.SupportedResponseTypes)
                {
                    resultType = $"Observable<{template.WriteType(response.Type)}>";
                }

                using (var m = template.AddMethod(methodName, resultType, parameters, RazorHelperTypescript.ExpositionEnum.Public))
                {
                    template.AddLine($"return this.{methodName}_WithHttpInfo({string.Join(", ", parameters.Select(c => c.Key))})");
                    using (template.AddBlock(".map((response: Response) => "))
                    {

                        using (template.AddIf("response.status === 204"))
                        {
                            template.AddLine("return undefined;");
                        }

                        using (template.AddElse())
                        {
                            template.AddLine("return response.json() || { };");
                        }
                    }
                    template.AddLine(");");
                }


                bool withBody = false;
                string methodToWrite = string.Empty;
                string bodyToWrite = string.Empty;
                switch (api.HttpMethod)
                {
                    case "GET":
                        methodToWrite = " method: RequestMethod.Get,";
                        bodyToWrite = " body:'',";
                        break;

                    case "POST":
                        methodToWrite = " method: RequestMethod.Post,";
                        bodyToWrite = " body: body == null ? '' : body, ";
                        withBody = true;
                        break;

                    case "PUT":
                        methodToWrite = " method: RequestMethod.Put,";
                        bodyToWrite = " body: body == null ? '' : body, ";
                        withBody = true;
                        break;

                    case "DELETE":
                        methodToWrite = " method: RequestMethod.Delete,";
                        bodyToWrite = " body: '',";
                        break;

                    case "HEAD":
                        methodToWrite = " method: RequestMethod.Head,";
                        bodyToWrite = " body: '',";
                        break;

                    case "OPTIONS":
                        methodToWrite = $" method: RequestMethod.Options,";
                        bodyToWrite = " body: '',";
                        break;

                    case "PATCH":
                        methodToWrite = " method: RequestMethod.Patch,";
                        bodyToWrite = " body: '',";
                        break;

                }

                parameters.Add(new KeyValuePair<string, string>("extraHttpRequestParams?", "any"));
                using (var m = template.AddMethod($"{methodName}_WithHttpInfo", "Observable<Response>", parameters, RazorHelperTypescript.ExpositionEnum.Private))
                {
                    template.AddEmpty();
                    template.AddLine($"const path = this.basePath + '/{api.RelativePath}';");

                    template.AddEmpty();
                    template.AddLine($"let queryParameters = new URLSearchParams();");
                    template.AddLine($"let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845");
                    template.AddLine($"let body : string = '';");

                    template.AddEmpty();

                    foreach (ApiParameterDescription p in api.ParameterDescriptions)
                    {

                        if (p.ModelMetadata != null && p.ModelMetadata.IsRequired)
                        {

                            using (template.AddIf($"{p.Name} === null || {p.Name} === undefined"))
                            {
                                template.AddLine($"throw new Error('Required parameter {p.Name} was null or undefined when calling {methodName}.');");
                            }

                            template.AddEmpty();

                        }

                    }

                    template.AddLine("// to determine the Accept header");
                    template.AddLine($"let produces: string[] = [ 'application/xml', 'application/json' ];");

                    foreach (ApiParameterDescription p in api.ParameterDescriptions)
                    {
                        using (template.AddIf($"{p.Name} !== undefined"))
                        {

                            if (api.RelativePath.Replace(" ", "").Contains("{" + p.Name + "}"))
                            {
                                template.AddLine($"queryParameters.set('{p.Name}', <any> {p.Name});");
                            }
                            else
                            {
                                template.AddLine($"body = JSON.stringify({p.Name});");
                            }
                        }

                        template.AddEmpty();

                    }

                    template.AddLine($"headers.set('Content-Type', 'application/json');");

                    template.AddEmpty();
                    template.AddLine("let requestOptions: RequestOptionsArgs = new RequestOptions({");

                    template.AddLine(" headers: headers,");
                    template.AddLine(methodToWrite);
                    template.AddLine(bodyToWrite);
                    template.AddLine(" search: queryParameters,");
                    template.AddLine(" withCredentials: this.configuration.withCredentials");
                    template.AddLine("});");

                    template.AddEmpty();
                    using (template.AddIf($"extraHttpRequestParams"))
                    {
                        template.AddLine($"requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);");
                    }

                    template.AddLine("return this.http.request(path, requestOptions);");

                }

                template.AddEmpty();

            }

        }

        template.CutFile(targetPath);

    }

}
