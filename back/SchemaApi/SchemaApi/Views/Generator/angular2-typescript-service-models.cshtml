@using Microsoft.AspNetCore.Mvc.ApiExplorer;
@using Molecular.Helpers;
@using SchemaApi.Models.Generators;
@using System.Reflection;
@model IApiDescriptionGroupCollectionProvider
@{

    var template = new RazorHelperTypescript(this);
    TypeDiscoverRepository repository = new TypeDiscoverRepository(Model);


    foreach (Type type in repository.Items)
    {

        if (type.IsConstructedGenericType)
        {
            continue;
        }

        template.AddStartComment();
        template.AddCommentLine("NOTE: This class is auto generated by the template angular2-typescript-service-models.cshtml.");
        template.AddCommentLine("Do not edit the class manually.");
        template.AddEndComment();
        template.AddEmpty();

        HashSet<Type> _types = new HashSet<Type>();

        string targetPath = $"Shared\\{type.Namespace.Replace(".", "\\")}\\{type.Name.Replace("`", "")}.ts";
        repository.FindTypeToImportInProperties(type, _types);

        foreach (var item in _types)
        {
            string txt = $"Shared\\{item.Namespace.Replace(".", "\\")}\\{item.Name.Replace("`", "")}.ts";
            string _path = PathBuilderHelper.GetRelativePath(System.IO.Path.Combine(@"c:\app", targetPath), System.IO.Path.Combine(@"c:\app", txt));
            template.AddImport(template.WriteTypeForImport(item), _path);
        }
        template.AddEmpty();

        var __t = type.GetTypeInfo();

        if (__t.IsEnum)
        {

            using (template.AddExportedEnum(type.Name))
            {
                var n1 = __t.GetEnumNames();
                Array n2 = __t.GetEnumValues();

                for (int i = 0; i < n1.Length; i++)
                {
                    template.AddEnumValue(n1[i], (int)(object)n2.GetValue(i));
                }
            }

        }
        else if (__t.IsClass || __t.IsValueType)
        {

            using (template.AddExportedClass(template.WriteType(type, true)))
            {
                foreach (var property in __t.GetProperties(BindingFlags.Instance | BindingFlags.Public))
                {
                    template.AddProperty(property.Name, template.WriteType(property.PropertyType, false));
                }
            }

        }
        else
        {
            this.WriteLiteral($"// not managed");
        }

        template.AddEmpty();

        template.CutFile($"{targetPath}");

    }

}
