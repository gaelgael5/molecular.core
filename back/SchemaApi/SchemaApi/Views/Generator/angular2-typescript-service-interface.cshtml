@using Microsoft.AspNetCore.Mvc.ApiExplorer;
@using SchemaApi.Helpers;
@using SchemaApi.Models.Generators;
@model IApiDescriptionGroupCollectionProvider
@{


    var template = new RazorHelperTypescript(this);
    TypeDiscoverRepository repository = new TypeDiscoverRepository(Model);

    foreach (ApiDescriptionGroup group in Model.ApiDescriptionGroups.Items)
    {

        string name = group.GroupName.Replace("Controller", "");
        string targetPath = $"Shared\\{name}\\{name}service.interface.ts";

        template.AddStartComment();
        template.AddCommentLine("NOTE: This class is auto generated by the template angular2-typescript-service-interface.cshtml.");
        template.AddCommentLine("Do not edit the class manually.");
        template.AddCommentLine($"* OpenAPI spec version: {Model.ApiDescriptionGroups.Version}.");
        template.AddCommentLine("Do not edit the class manually.");
        template.AddEndComment();
        template.AddEmpty();

        // Imports
        HashSet<Type> _types = new HashSet<Type>();

        foreach (ApiDescription api in group.Items)
        {
            foreach (ApiParameterDescription p in api.ParameterDescriptions)
            {
                repository.FindTypeToImport(p.Type, _types);
            }

            foreach (ApiResponseType response in api.SupportedResponseTypes)
            {
                repository.FindTypeToImport(response.Type, _types);
            }
        }

        template.AddImport("Headers", "@angular/http");
        template.AddImport("Observable", "rxjs/Observable");
        template.AddImport("Configuration", PathBuilderHelper.GetRelativePath(System.IO.Path.Combine(@"c:\app", targetPath), "c:\\app\\shared\\configuration.model.ts"));
        foreach (var item in _types)
        {
            string txt = $"Shared\\{item.Namespace.Replace(".", "\\")}\\{item.Name}.ts";
            string _path = PathBuilderHelper.GetRelativePath(System.IO.Path.Combine(@"c:\app", targetPath), System.IO.Path.Combine(@"c:\app", txt));         
            template.AddImport(template.WriteType(item), _path);
        }

        template.AddEmpty();

        using (var t = template.AddExportedInterface("I" + name))
        {

            template.AddProperty("defaultHeaders", "Headers");
            template.AddProperty("configuration", "Configuration");
            template.AddLine("[others: string]: any;");
            template.AddEmpty();

            foreach (ApiDescription api in group.Items)
            {

                var nn = api.ActionDescriptor.DisplayName.Split('(')[0].Split('.');
                string methodName = nn[nn.Length - 1].Trim();

                template.AddStartComment();
                template.AddCommentLine(api.ActionDescriptor.DisplayName);
                //template.AddCommentLine("@param body Created user object");
                template.AddEndComment();
                template.AddEmpty();

                var parameters = new List<KeyValuePair<string, string>>();

                foreach (ApiParameterDescription p in api.ParameterDescriptions)
                {
                    parameters.Add(new KeyValuePair<string, string>(p.Name, template.WriteType(p.Type)));
                }

                string resultType = "Observable<{}>";
                foreach (ApiResponseType response in api.SupportedResponseTypes)
                {
                    resultType = $"Observable<{template.WriteType(response.Type)}>";
                }

                template.AddInterfaceMethod(methodName, resultType, parameters);

            }
        }

        template.AddEmpty();

        template.CutFile(targetPath);

    }

}
