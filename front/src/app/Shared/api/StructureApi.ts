/**
 * molecular api
 * Backend molecular api
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StructureApi {

    protected basePath = 'https://localhost';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary delete item by specified name
     * @param application path where the model is stored
     * @param name name is the name pprperty of the item you want accessing.
     * @param lockid unique lockid that the method lock has returned.
     */
    public apiStructureByApplicationByNameByLockidDelete(application: string, name: string, lockid: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.apiStructureByApplicationByNameByLockidDeleteWithHttpInfo(application, name, lockid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Create a new empty item with the specified for key
     * @param application 
     * @param name name is the name pprperty of the item you want accessing.
     */
    public apiStructureCreateByApplicationByNameGet(application: string, name: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.apiStructureCreateByApplicationByNameGetWithHttpInfo(application, name, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Item's list stored on disk
     * @param application The application.
     */
    public apiStructureIndexByApplicationGet(application: string, extraHttpRequestParams?: any): Observable<models.InlineResponse2001> {
        return this.apiStructureIndexByApplicationGetWithHttpInfo(application, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Locks item for the specified name.
     * @param application path where the model is stored
     * @param name name is the name pprperty of the item you want accessing.
     */
    public apiStructureLockByApplicationByNameGet(application: string, name: string, extraHttpRequestParams?: any): Observable<string> {
        return this.apiStructureLockByApplicationByNameGetWithHttpInfo(application, name, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary read the specified item
     * @param application path where the model is stored
     * @param name name of the model
     */
    public apiStructureReadByApplicationByNameGet(application: string, name: string, extraHttpRequestParams?: any): Observable<models.InlineResponse2003> {
        return this.apiStructureReadByApplicationByNameGetWithHttpInfo(application, name, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary unlock specifed item.  if lock id is null you must be Administrator
     * @param application path where the model is stored
     * @param name name is the name pprperty of the item you want accessing.
     * @param lockid unique lockid that the method lock has returned.
     */
    public apiStructureUnlockByApplicationByNameByLockidGet(application: string, name: string, lockid: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.apiStructureUnlockByApplicationByNameByLockidGetWithHttpInfo(application, name, lockid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param application 
     * @param lockid 
     * @param item 
     */
    public apiStructureUpdateByApplicationByLockidPost(application: string, lockid: string, item?: models.Item1, extraHttpRequestParams?: any): Observable<{}> {
        return this.apiStructureUpdateByApplicationByLockidPostWithHttpInfo(application, lockid, item, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * delete item by specified name
     * 
     * @param application path where the model is stored
     * @param name name is the name pprperty of the item you want accessing.
     * @param lockid unique lockid that the method lock has returned.
     */
    public apiStructureByApplicationByNameByLockidDeleteWithHttpInfo(application: string, name: string, lockid: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Structure/${application}/${name}/${lockid}'
                    .replace('${' + 'application' + '}', String(application))
                    .replace('${' + 'name' + '}', String(name))
                    .replace('${' + 'lockid' + '}', String(lockid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling apiStructureByApplicationByNameByLockidDelete.');
        }
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiStructureByApplicationByNameByLockidDelete.');
        }
        // verify required parameter 'lockid' is not null or undefined
        if (lockid === null || lockid === undefined) {
            throw new Error('Required parameter lockid was null or undefined when calling apiStructureByApplicationByNameByLockidDelete.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create a new empty item with the specified for key
     * 
     * @param application 
     * @param name name is the name pprperty of the item you want accessing.
     */
    public apiStructureCreateByApplicationByNameGetWithHttpInfo(application: string, name: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Structure/create/${application}/${name}'
                    .replace('${' + 'application' + '}', String(application))
                    .replace('${' + 'name' + '}', String(name));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling apiStructureCreateByApplicationByNameGet.');
        }
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiStructureCreateByApplicationByNameGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Item&#39;s list stored on disk
     * 
     * @param application The application.
     */
    public apiStructureIndexByApplicationGetWithHttpInfo(application: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Structure/index/${application}'
                    .replace('${' + 'application' + '}', String(application));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling apiStructureIndexByApplicationGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Locks item for the specified name.
     * 
     * @param application path where the model is stored
     * @param name name is the name pprperty of the item you want accessing.
     */
    public apiStructureLockByApplicationByNameGetWithHttpInfo(application: string, name: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Structure/lock/${application}/${name}'
                    .replace('${' + 'application' + '}', String(application))
                    .replace('${' + 'name' + '}', String(name));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling apiStructureLockByApplicationByNameGet.');
        }
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiStructureLockByApplicationByNameGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * read the specified item
     * 
     * @param application path where the model is stored
     * @param name name of the model
     */
    public apiStructureReadByApplicationByNameGetWithHttpInfo(application: string, name: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Structure/read/${application}/${name}'
                    .replace('${' + 'application' + '}', String(application))
                    .replace('${' + 'name' + '}', String(name));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling apiStructureReadByApplicationByNameGet.');
        }
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiStructureReadByApplicationByNameGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * unlock specifed item.  if lock id is null you must be Administrator
     * 
     * @param application path where the model is stored
     * @param name name is the name pprperty of the item you want accessing.
     * @param lockid unique lockid that the method lock has returned.
     */
    public apiStructureUnlockByApplicationByNameByLockidGetWithHttpInfo(application: string, name: string, lockid: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Structure/unlock/${application}/${name}/${lockid}'
                    .replace('${' + 'application' + '}', String(application))
                    .replace('${' + 'name' + '}', String(name))
                    .replace('${' + 'lockid' + '}', String(lockid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling apiStructureUnlockByApplicationByNameByLockidGet.');
        }
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiStructureUnlockByApplicationByNameByLockidGet.');
        }
        // verify required parameter 'lockid' is not null or undefined
        if (lockid === null || lockid === undefined) {
            throw new Error('Required parameter lockid was null or undefined when calling apiStructureUnlockByApplicationByNameByLockidGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param application 
     * @param lockid 
     * @param item 
     */
    public apiStructureUpdateByApplicationByLockidPostWithHttpInfo(application: string, lockid: string, item?: models.Item1, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Structure/update/${application}/${lockid}'
                    .replace('${' + 'application' + '}', String(application))
                    .replace('${' + 'lockid' + '}', String(lockid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling apiStructureUpdateByApplicationByLockidPost.');
        }
        // verify required parameter 'lockid' is not null or undefined
        if (lockid === null || lockid === undefined) {
            throw new Error('Required parameter lockid was null or undefined when calling apiStructureUpdateByApplicationByLockidPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: item == null ? '' : JSON.stringify(item), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
