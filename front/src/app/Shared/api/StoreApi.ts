/**
 * molecular api
 * Backend molecular api
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StoreApi {

    protected basePath = 'https://localhost';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Deletes the specified name.
     * @param name name is the name pprperty of the item you want accessing.
     * @param lockid unique lockid that the method lock has returned.
     */
    public apiStoreByNameByLockidDelete(name: string, lockid: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.apiStoreByNameByLockidDeleteWithHttpInfo(name, lockid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Creates empty item by specified name.
     * @param name name is the name pprperty of the item you want accessing.
     */
    public apiStoreCreateByNameGet(name: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.apiStoreCreateByNameGetWithHttpInfo(name, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Indexes of stored items.
     */
    public apiStoreIndexGet(extraHttpRequestParams?: any): Observable<models.InlineResponse2001> {
        return this.apiStoreIndexGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Locks item for the specified name.
     * @param name name is the name pprperty of the item you want accessing.
     */
    public apiStoreLockByNameGet(name: string, extraHttpRequestParams?: any): Observable<string> {
        return this.apiStoreLockByNameGetWithHttpInfo(name, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Reads item by the specified name.
     * @param name name is the name pprperty of the item you want accessing.
     */
    public apiStoreReadByNameGet(name: string, extraHttpRequestParams?: any): Observable<models.InlineResponse2002> {
        return this.apiStoreReadByNameGetWithHttpInfo(name, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Unlocks the specified name.
     * @param name name is the name pprperty of the item you want accessing.
     * @param lockid unique lockid that the method lock has returned.
     */
    public apiStoreUnlockByNameByLockidGet(name: string, lockid: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.apiStoreUnlockByNameByLockidGetWithHttpInfo(name, lockid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param lockid 
     * @param item 
     */
    public apiStoreUpdateByLockidPost(lockid: string, item?: models.Item, extraHttpRequestParams?: any): Observable<{}> {
        return this.apiStoreUpdateByLockidPostWithHttpInfo(lockid, item, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Deletes the specified name.
     * 
     * @param name name is the name pprperty of the item you want accessing.
     * @param lockid unique lockid that the method lock has returned.
     */
    public apiStoreByNameByLockidDeleteWithHttpInfo(name: string, lockid: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Store/${name}/${lockid}'
                    .replace('${' + 'name' + '}', String(name))
                    .replace('${' + 'lockid' + '}', String(lockid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiStoreByNameByLockidDelete.');
        }
        // verify required parameter 'lockid' is not null or undefined
        if (lockid === null || lockid === undefined) {
            throw new Error('Required parameter lockid was null or undefined when calling apiStoreByNameByLockidDelete.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Creates empty item by specified name.
     * 
     * @param name name is the name pprperty of the item you want accessing.
     */
    public apiStoreCreateByNameGetWithHttpInfo(name: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Store/create/${name}'
                    .replace('${' + 'name' + '}', String(name));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiStoreCreateByNameGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Indexes of stored items.
     * 
     */
    public apiStoreIndexGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Store/index';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Locks item for the specified name.
     * 
     * @param name name is the name pprperty of the item you want accessing.
     */
    public apiStoreLockByNameGetWithHttpInfo(name: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Store/lock/${name}'
                    .replace('${' + 'name' + '}', String(name));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiStoreLockByNameGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Reads item by the specified name.
     * 
     * @param name name is the name pprperty of the item you want accessing.
     */
    public apiStoreReadByNameGetWithHttpInfo(name: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Store/read/${name}'
                    .replace('${' + 'name' + '}', String(name));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiStoreReadByNameGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Unlocks the specified name.
     * 
     * @param name name is the name pprperty of the item you want accessing.
     * @param lockid unique lockid that the method lock has returned.
     */
    public apiStoreUnlockByNameByLockidGetWithHttpInfo(name: string, lockid: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Store/unlock/${name}/${lockid}'
                    .replace('${' + 'name' + '}', String(name))
                    .replace('${' + 'lockid' + '}', String(lockid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiStoreUnlockByNameByLockidGet.');
        }
        // verify required parameter 'lockid' is not null or undefined
        if (lockid === null || lockid === undefined) {
            throw new Error('Required parameter lockid was null or undefined when calling apiStoreUnlockByNameByLockidGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param lockid 
     * @param item 
     */
    public apiStoreUpdateByLockidPostWithHttpInfo(lockid: string, item?: models.Item, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/Store/update/${lockid}'
                    .replace('${' + 'lockid' + '}', String(lockid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'lockid' is not null or undefined
        if (lockid === null || lockid === undefined) {
            throw new Error('Required parameter lockid was null or undefined when calling apiStoreUpdateByLockidPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: item == null ? '' : JSON.stringify(item), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
